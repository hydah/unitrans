#include "ind-prof.h"
#include "retrans-ind.h"

bool prof_run = false;

uint32_t count_ind_tgt(ind_tgt_stat *node, uint32_t tgt)
{
    int idx;

    idx = IND_HASH(tgt);
    if((node->tgt_count[idx])++ == IND_THRESHOLD) {
        return node->tgt_count[idx];
    } else {
        return 0;
    }
}

#define SWAP(x ,y , tmp) \
    do { \
        tmp = x; \
        x = y; \
        y = tmp; \
    } while(0)


static void sort_tgt(stat_node *node)
{
    int i, j;
    int done;
    uint32_t tmp;

    for(i = 0; i < node->tgt_count - 1; i++) {
        done = 1;
        for(j = 0; j < node->tgt_count - i - 1; j++) {
            if(node->tgt_addr_hit[j] < node->tgt_addr_hit[j + 1]) {
                done = 0;
                SWAP(node->tgt_addr_hit[j], node->tgt_addr_hit[j+1], tmp);
                SWAP(node->tgt_addr[j], node->tgt_addr[j+1], tmp);
            }
        }
        if(done == 1) break;
    }
}

void stat_src_add(uint32_t src_addr) 
{
    int i;   

    //fprintf(stderr, "src_add: 0x%x\n", src_addr);
    for(i = 0; i < cgc->stat_node_count; i++) {
        if(cgc->stat_nodes[i].src_addr == src_addr) break;
    }

    if(i == cgc->stat_node_count) {
        cgc->stat_node_count++;
        cgc->stat_nodes[i].src_addr = src_addr;
        cgc->stat_nodes[i].tgt_count = 0;
    }
    
    ABORT_IF((cgc->stat_node_count == STAT_NODE_MAX), "STAT_NODE overflow\n");

}

static void stat_tgt_recent_th(uint32_t tgt_addr, stat_node *node, uint32_t hits)
{
    int i;

    /* check recent */
    for(i = 0; i < IND_SLOT_MAX; i++) {
        if(tgt_addr == node->tgt_recent_addr[i]) {
           node->tgt_recent_hit++;
           break;
        }
    }

    /* add recent */
    if(node->recent_index < IND_SLOT_MAX) {
        if(i == IND_SLOT_MAX) {
	    if(hits > IND_THRESHOLD) {
                //fprintf(stderr, "count: %d\n", hits);
                node->tgt_recent_addr[node->recent_index] = tgt_addr;
                node->recent_index++;
	    }
        }
    }
}

static void stat_tgt_recent_fifo(uint32_t tgt_addr, stat_node *node)
{
    int i;

    /* check recent */
    for(i = 0; i < IND_SLOT_MAX; i++) {
        if(tgt_addr == node->tgt_recent_addr[i]) {
           node->tgt_recent_hit++;
           break;
        }
    }
    /* add recent */
    if(i == IND_SLOT_MAX) {
        node->tgt_recent_addr[node->recent_index] = tgt_addr;
        node->recent_index++;
        if (node->recent_index >= IND_SLOT_MAX)
            node->recent_index -= IND_SLOT_MAX;
    }
}

/* fill the first encounter target to slot */
static void stat_tgt_recent_once(uint32_t tgt_addr, stat_node *node)
{
    int i;

    /* check recent */
    for(i = 0; i < IND_SLOT_MAX; i++) {
        if(tgt_addr == node->tgt_recent_addr[i]) {
           node->tgt_recent_hit++;
           break;
        }
    }

    /* add recent */
    if(i == IND_SLOT_MAX) {
	if(node->recent_index < IND_SLOT_MAX) {
            node->tgt_recent_addr[node->recent_index] = tgt_addr;
            node->recent_index++;
        }
    }
}

#ifdef PROF_PATH
static stat_node *make_stat_node(uint32_t src_addr, uint32_t path[], uint32_t idx)
{
    stat_node *node;

    cgc->stat_node_count++;
    node = &cgc->stat_nodes[idx];
    node->src_addr = src_addr;
    memcpy(node->path, path, sizeof(node->path));
    node->tgt_count = 0;
    node->tgt_recent_hit = 0;

    //fprintf(stderr, "%d\n", cgc->stat_node_count);
    ABORT_IF((cgc->stat_node_count == STAT_NODE_MAX), "STAT_NODE overflow\n");

    return node; 
}

static uint32_t f_idx = 0;
static uint32_t b_idx = STAT_NODE_MAX - 1;

stat_node *find_node_with_path(CPUX86State *env, uint32_t src_addr, 
                        uint32_t path[], uint32_t path_size)
{
    int i;
    bool found;
    stat_node *node, *prev_node;

    found = false;
    /* match src_addr */
    for(i = 0; i < f_idx; i++) {
        node = &cgc->stat_nodes[i];
        if(node->src_addr == src_addr) {
            found = true;
            break;
        }
    }
    if(found == false) {
        /* add new node */
        node = make_stat_node(src_addr, path, f_idx++);
        return node;
    }

    /* match path */
    found = false;
    while(node != NULL) {
        prev_node = node;
        if(memcmp(node->path, path, path_size) == 0) {
            found = true;
            break;
        }
        node = node->next;
    }
    if(found == false) {
        /* add new node */
        node = make_stat_node(src_addr, path, b_idx--);
        prev_node->next = node; 
    }

    return node;
}

void stat_tgt_add_path(CPUX86State *env, uint32_t src_addr, uint32_t tgt_addr)
{
    int i, j;
    uint32_t prev_tb;
    uint32_t path[PATH_DEPTH];
    stat_node *node;

    /* record the last 4 tb */
    //for(i = 0; i < PATH_DEPTH; i++) path[i] = 0;
    memset(path, 0x0, sizeof(path));

    j = env->path_stack_index - 1;
    for(i = 0; i < PATH_DEPTH; i++) {
        j = (j - i);
        if(j < 0) j += PATH_STACK_SIZE;
        prev_tb = *(env->path_stack_base + j);
#ifdef PROF_PATH_WO_IND
	if(prev_tb == PATH_IND_TAG) {
            break;
	}
#endif
	path[i] = prev_tb;
    }

    node = find_node_with_path(env, src_addr, path, sizeof(path));
#if 0
    /* find node */
    for(i = 0; i < cgc->stat_node_count; i++) {
        if(cgc->stat_nodes[i].src_addr == src_addr &&
           !memcmp(cgc->stat_nodes[i].path, path, sizeof(path))) break;
    }

    /* add new node */
    if (i == cgc->stat_node_count) {
        cgc->stat_node_count++;
        cgc->stat_nodes[i].src_addr = src_addr;
        memcpy(cgc->stat_nodes[i].path, path, sizeof(path));
        cgc->stat_nodes[i].tgt_count = 0;
        cgc->stat_nodes[i].tgt_recent_hit = 0;
        ABORT_IF((cgc->stat_node_count == STAT_NODE_MAX), "STAT_NODE overflow\n");
        fprintf(stderr, "%d\n", cgc->stat_node_count);
    }
#endif
    node->tgt_dyn_count++;

    /* find tgt */
    for(i = 0; i < node->tgt_count; i++) {
        if(tgt_addr == node->tgt_addr[i]) {
            node->tgt_addr_hit[i]++;
            break;
        }
    }
    if(i == node->tgt_count) {
        node->tgt_addr[i] = tgt_addr;
        node->tgt_addr_hit[i] = 1;
        node->tgt_count++;
